package com.pwdgame.animation;

import android.annotation.SuppressLint;
import android.os.Build;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;

import com.nineoldandroids.animation.Animator;
import com.nineoldandroids.animation.ObjectAnimator;
import com.nineoldandroids.animation.ValueAnimator;


public class AnimationUtils {	
	
	/**
	 * 启动动画 {@link ObjectAnimator}
	 * @param target 
	 * @param propertyName
	 * @param duration 动画时长
	 * @param endHide 动画完成后是否target隐藏(如果是view)
	 * @param values
	 */
	@SuppressLint("NewApi")
	public static void startAnimationEx(final Object target, final String propertyName,final long duration,final boolean endHide, final int... values){
		if(target==null)
			return;
		if(target instanceof View){
			final View view=(View)target;
			if(view.getHeight()==0){
				view.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
					
					@Override
					public void onGlobalLayout() {								
						startAnimation(target,propertyName,duration,endHide,values);
						if(Build.VERSION.SDK_INT>=16){
							view.getViewTreeObserver().removeOnGlobalLayoutListener(this);
						}else{
							view.getViewTreeObserver().removeGlobalOnLayoutListener(this);
						}		
					}
				});
			}else{
				startAnimation(target,propertyName,duration,endHide,values);	
			}
			
		}else{
			startAnimation(target,propertyName,duration,endHide,values);	
		}
	}
	/**
	 * 启动动画
	 * @param target
	 * @param propertyName
	 * @param duration
	 * @param endHide
	 * @param values
	 */
	private static void startAnimation(final Object target, final String propertyName,final long duration,final boolean endHide, final int... values){
		//将 value 的1f转换成VIEW的宽度或高度
		if(target instanceof View && (propertyName.startsWith("translation")||propertyName.equals("width")||propertyName.equals("height"))){
			View view=(View)target;
			boolean isX=propertyName.equals("translationX")||propertyName.equals("width")? true:false;
			for(int i=0,size=values.length;i<size;i++){
				if(values[i]==1f){
					if(isX){
						values[i]=view.getWidth();
					}else{
						values[i]=view.getHeight();
					}
				}
			}
		}

		
		com.nineoldandroids.animation.ValueAnimator animator =null;
				
		if("height".equals(propertyName)||"width".equals(propertyName)){

			animator=ValueAnimator.ofInt(values);
			animator.addUpdateListener(new com.nineoldandroids.animation.ValueAnimator.AnimatorUpdateListener() {
				
				@Override
				public void onAnimationUpdate(ValueAnimator animation) {
					View view=(View)target;
					ViewGroup.LayoutParams mLayoutParams=view.getLayoutParams();
					if("height".equals(propertyName)){
					    mLayoutParams.height = (Integer) animation.getAnimatedValue();
					}else if("width".equals(propertyName)){						
						mLayoutParams.width = (Integer) animation.getAnimatedValue();						
					}
				
					view.requestLayout();
				}
			});
		}else{
			com.nineoldandroids.animation.ObjectAnimator.ofInt(target, propertyName, values).setDuration(duration);

		}
		if(endHide){
			animator.addListener(new com.nineoldandroids.animation.AnimatorListenerAdapter(){
				@Override
				public void onAnimationEnd(Animator animation) {
					if(target instanceof View)
					((View)target).setVisibility(View.GONE);
				}
			});		
		}
		animator.start();
	}
//	
}
